#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketdemo:server');
var http = require('http');
const firebaseAdminDb=require('../connections/firebase_admin');
const messageRef=firebaseAdminDb.ref('/msg');
const SocketHander = require('../socket/index');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);


////socket
var io = require('socket.io').listen(server);
// var io = require('socket.io')(http);
io.on('connection', function(socket){
  console.log('a user connected');

  socketHander = new SocketHander();

  socketHander.connect();

  messageRef.once('value').then(function(snapshot){
    if(snapshot){

    
      const socketid = socket.id;
      console.log(JSON.stringify(snapshot.val()));
      const  articles= [];

      snapshot.forEach(function(snapshotChild){

        //console.log('child'+snapshotChild.val());
      
          articles.push(snapshotChild.val());
        
        
     });

      io.to(socketid).emit('history', articles);
       
        //return snapshot.val();
       

    }

    

});
  //console.log("history "+history);



  socket.on("message", (obj) => {
    socketHander.storeMessages(obj);
    io.emit("message", obj);
  });

  socket.on("disconnect", () => {
    console.log("a user go out");
  });

});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
